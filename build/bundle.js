(()=>{"use strict";class t{constructor(t){this.host="http://localhost:3000",t&&(this.host=t)}static getInstance(s){return t.instance||(t.instance=new t(s)),t.instance}saveEvent(t,s){fetch(`${this.host}/event`,{method:"POST",body:JSON.stringify(t),headers:{"Content-type":"application/json",Accept:"application/json"}}).then((t=>{200==t.status&&t.json().then((t=>{s&&s(t)}))}))}getUserData(t,s){fetch(`${this.host}/customer/${t}`).then((t=>{200==t.status&&t.json().then((t=>{s&&s(t)}))}))}}const s={cid:null,sid:null},e="cdplight",i=t=>new Proxy(s,{set:(s,i,n)=>{const o=t.getItem(e);(s=o?JSON.parse(atob(o)):{})[i]=null===n?null:n;const a=btoa(JSON.stringify(s));return t.setItem(e,a),!0},get:(s,i)=>{const n=t.getItem(e);if(n&&(s=n?JSON.parse(atob(n)):{})[i])return s[i]}});class n{constructor(t,s,e){this.sendInitEvent=()=>{const t=window.argoinit||{},s=(t=>{const s=window.location.search.matchAll(/([a-zA-Z]+)=([^&]+)/gi);let e;const i={};for(;(e=s.next())&&!e.done;)i[e.value[1]]=e.value[2];return i})(),e=s.source||(s.gclid?"ad":"web"),i={evt:"pageview",strval:document.title,intval:this.storage.pv,src:e,url:window.location.href,ref:document.referrer+"",...t};this.send("pageview",document.title,i)},window.arrigooInit=window.arrigooInit||{},this.init=window.arrigooInit,this.client=t,this.storage=i(s),this.storage.pv=this.storage.pv+1,this.storageTemp=i(e||sessionStorage)}set(t,s){this.init[t]=s}get(t){return this.storageTemp[t]||this.storage[t]}getFullProfile(){return{cid:this.storage.cid,p:this.storageTemp.p,s:this.storageTemp.s,c:this.storageTemp.c}}unset(t){delete this.init[t]}getInit(){return this.init}getHashValues(){return window.location.hash}getSearchValue(t){return new URLSearchParams(window.location.search||"").get(t)}setCidAndFirstVisit(){const t={fv:!1};return this.storage.cid||(this.storage.cid="",t.fv=!0),t.cid=this.storage.cid,t}setSession(t){this.storage.sct=this.storage.sct?this.storage.sct+1:1;const s=this.storage.lastEvent||0;let e=this.storage.sid;t.ns=!1;const i=Math.floor(Date.now()/1e3);return(!e||i-s>1800)&&(e=i,this.storage.sid=e,t.ns=!0,this.storage.sct=1),this.storage.lastEvent=i,t.sid=e,t}consent(t,s){const e=this.setSession(this.setCidAndFirstVisit());let i=0;"GRANT"===t.status&&(i=1),"REVOKE"===t.status&&(i=-1);const n={evt:"consent",src:t.type,strval:t.scope,intval:i,url:window.location.href,topics:[t.type],sid:0,cid:this.storage.cid,...e};this.client.saveEvent(n,(t=>{s&&s(t)}))}send(t,s,e){let i={evt:t,strval:s||"",...this.setSession(this.setCidAndFirstVisit()),...e||{}};this.client.saveEvent(i,(t=>{if(t.p||t.s){const s=new CustomEvent("ao_recognized",{detail:t});this.storageTemp.s=t.s||[],this.storageTemp.p=t.p||{},document.dispatchEvent(s)}if(t.cid){this.storage.cid=t.cid;const s=new CustomEvent("ao_cid",{detail:t.cid});document.dispatchEvent(s)}const s=new CustomEvent("ao_event_sent",{detail:t});document.dispatchEvent(s)}))}}const o=t.getInstance(window.arrigooHost||"http://localhost:3000"),a=new Event("ao_loaded");document.addEventListener("DOMContentLoaded",(()=>{window.argo=new n(o,localStorage),window.document.dispatchEvent(a)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,